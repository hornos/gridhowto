#!/bin/bash
gbn=$(basename $0)
gdn=$(cd $(dirname $0); pwd)
jockey_root=${gdn}

default=centos6.3

### defaults for OS X
host=${jockey_root}/.host
if [ -r ${host} ] ; then
  source ${host}
fi
usrlocal=/usr/local

### args
cmd=${1:-test}
shift
arg=$1

### dnsmasq
jockey_ip=${ip:-10.1.1.254}

masq_conf=${jockey_root}/.masq
masq_root=${jockey_root}/boot

ipxe_root=${masq_root}/pxelinux.cfg

### http server (nginx)
http_conf=${jockey_root}/.http
http_listen=${jockey_ip}:8080
http_root=${masq_root}

nginx_bin=${usrlocal}/sbin/nginx
dnsmasq_bin=${usrlocal}/sbin/dnsmasq

### functions
function control/exit() {
  local _c
  for _c in ${http_conf} ${masq_conf} ; do
    if [ -r ${_c} ] ; then
      rm -f ${_c}
    fi
  done
}
trap control/exit INT TERM EXIT

function help/control() {
  cat <<EOF

Primordial boot manager

Usage: jockey cmd  args    description
              host IP      - set host IP
              kick MAC     - create a kickstart for a MAC address on host IP
              pass         - generate a password
              dump         - listen to bootp requests
              http         - start ngnix http server on host IP
              masq         - start dnsmasq server on host IP
EOF
  exit 1
}

function control/_pass() {
  awk '{print(substr($0,1,4))"-"(substr($0,5,4))"-"(substr($0,9,4))"-"(substr($0,13,4))}'
}

function control/pass() {
  local _r=""
  for i in {1..5}; do _r=${_r}$RANDOM; done

  echo ${_r} | control/_pass
}

function control/netpass() {
  curl -s "https://www.random.org/strings/?num=1&len=16&digits=on&unique=off&&rnd=new&format=plain" | \
  control/_pass
}

### main
case ${cmd} in
  pass|netpass)
    control/${cmd}
  ;;

  host)
    echo "ip=${arg}" | tee ${host}
  ;;

  kick)
    if [ -z "${arg}" ] ; then help/control; fi

    mac=${arg}
    http_listen=${jockey_ip}:8080

    pass=$(control/pass)
    echo ""
    echo "Space Jockey Kickstart Generator"
    echo ""
    echo "root password for ${mac}: ${pass}"
    echo ""
    root_pass=$(openssl passwd -1 "${pass}")
    ks=$(echo "${mac}" | sed s/:/-/g)
    cat ${jockey_root}/kickstart | \
    awk -v p=${root_pass} '{gsub("ROOT_PASSWORD",p); print}' \
    > ${http_root}/${ks}.ks

    kickstart=${http_listen}/${ks}.ks
    cat ${jockey_root}/boot/default | \
    awk -v k=${kickstart} -v d=${default} '{gsub("KICKSTART",k); gsub("_DEFAULT",d); print}' \
    > ${ipxe_root}/01-${ks}
  ;;

  local|memtest|detect)
    if [ -z "${arg}" ] ; then help/control; fi

    mac=${arg}
    http_listen=${jockey_ip}:8080
    ks=$(echo "${mac}" | sed s/:/-/g)
    kickstart=${http_listen}/${ks}.ks
    default=${cmd}
    cat ${jockey_root}/boot/default | \
    awk -v k=${kickstart} -v d=${default} '{gsub("KICKSTART",k); gsub("_DEFAULT",d); print}' \
    > ${ipxe_root}/01-${ks}
  ;;

  dump)
    tcpdump -i ${arg} port bootps
  ;;

  http)
    cat ${jockey_root}/http | \
    awk -v p=${http_root} -v l=${http_listen} '{gsub("HTTP_ROOT",p); gsub("HTTP_LISTEN",l); print}' \
    > ${http_conf}
    echo "Starting HTTP Server..."
    echo "Press Ctrl+C to exit"
    ${nginx_bin} -c ${http_conf}
  ;;

  boot)
    cat ${jockey_root}/masq | \
    awk -v p=${masq_root} -v l=${jockey_ip} '{gsub("DNSMASQ_LISTEN",l); gsub("DNSMASQ_ROOT",p); print}' \
    > ${masq_conf}

    echo "Starting DNSmasq server..."
    echo "Press Ctrl+C to exit"
    sudo ${dnsmasq_bin} -d -C ${masq_conf}
  ;;
  *)
    help/jockey
  ;;
esac
