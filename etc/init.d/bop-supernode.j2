#!/usr/bin/env bash
### BEGIN INIT INFO
# Provides:          bop-server
# Required-Start:    $network $local_fs
# Required-Stop:
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Starts bop-server
# Description:       Starts bop-server using start-stop-daemon
### END INIT INFO
#
# Copyright 2013 bits of proof zrt.
# ------------------------------------------------------------------------
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ------------------------------------------------------------------------

BOP_VERSION=1.1-SNAPSHOT
BOP_USER="bop" 
BOP_BASE="/opt/supernode"
JVM_FLAGS="-server -Xmx1g -Duser.dir=${BOP_BASE}"
BOP_CONTEXTS="leveldb production BCSAPI server"
DAEMON="${BOP_BASE}/server/target/bitsofproof-server-${BOP_VERSION}.jar"

service=bop-server

PID_FILE="${BOP_BASE}/supernode.pid"
DEFAULT_CONF=/etc/default/bop-supernode

. /lib/init/vars.sh
. /lib/lsb/init-functions

# Exit if the package is not installed
[ -r "$DAEMON" ] || exit 0

if [ -f ${DEFAULT_CONF} ]
then
    . ${DEFAULT_CONF}
fi


status() {
  if [ -f "${PID_FILE}" ] ; then
    pid=`cat "${PID_FILE}"`
    # check to see if it's gone...
    ps -p ${pid} > /dev/null
    if [ $? -eq 0 ] ; then
      return 1
    fi
  fi
  return 0
}

stop() {
  if [ -f "${PID_FILE}" ] ; then
    pid=`cat "${PID_FILE}"`
    kill $@ ${pid} > /dev/null
    sleep 2
    rm -f ${PID_FILE}
  fi
  for i in 1 2 3 4 5 ; do
    status
    if [ $? -eq 0 ] ; then
      return 0
    fi
    sleep 1
  done
  log_progress_msg "Failed ${pid}"
  return 1
}

start() {

  status
  if [ $? -eq 1 ] ; then
    echo "Already running."
    return 1
  fi
 
  cd ${BOP_BASE}
  nohup sudo -n -u ${BOP_USER} java ${JVM_FLAGS} -jar ${DAEMON} ${BOP_CONTEXTS} > /dev/null 2> /dev/null &

  echo $! > "${PID_FILE}"

  # check to see if stays up...
  sleep 4
  status
  if [ $? -eq 0 ] ; then
    log_progress_msg "Failed ${service}"
    return 1
  fi
  log_progress_msg "${service} is now running (${pid})"
  return 0
}

fgstart() {
   status
  if [ $? -eq 1 ] ; then
    echo "Already running."
    return 1
  fi
 
  cd ${BOP_BASE}
  java ${JVM_FLAGS} -jar ${DAEMON} ${BOP_CONTEXTS}
}


case $1 in
  start)
    log_daemon_msg "Start ${service}"
    log_progress_msg "Start ${service}"
    start
    exit $?
  ;;
  fgstart)
    fgstart
    exit $?
  ;;
  force-stop)
    log_daemon_msg "Stop ${service}"
    log_progress_msg "Stop ${service}"
    stop -9
    exit $?
  ;;

  stop)
    log_daemon_msg "Stop ${service}"
    log_progress_msg "Stop ${service}"
    stop
    exit $?
  ;;

  restart)
    log_daemon_msg "Restart ${service}"
    log_progress_msg "Restart ${service}"
    stop
    start
    exit $?
  ;;

  status)
    status
    if [ $? -eq 0 ] ; then
      echo "${service} is stopped"
    else
      echo "${service} is running (${pid})"
    fi
    exit 0
  ;;

  *)
    echo "Usage: $0 {start|stop|restart|force-stop|status}" >&2
    exit 2
  ;;
esac
