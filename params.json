{"name":"Gridhowto","tagline":"Grid Ansible Slurm Centos","body":"Grid Howto\r\n==========\r\nThis howto is for CentOS based clusters. You can try the setup in VirtualBox as well, although you will lack BMC and IB features.\r\n\r\nInstall ansible on the local client. Ansible should be installed into `$HOME/ansible`:\r\n\r\n    cd $HOME\r\n    git clone git://github.com/ansible/ansible.git\r\n\r\nEdit your `$HOME/.bashrc`:\r\n\r\n    source $HOME/ansible/hacking/env-setup &> /dev/null\r\n\r\nRun the source command:\r\n\r\n    source $HOME/.bashrc\r\n\r\n## Root servers\r\nInstall gridhowto:\r\n\r\n    cd $HOME\r\n    git clone git://github.com/hornos/gridhowto.git\r\n\r\nInstall at least 2 root servers for HA. Try to use multi-master setups and avoid heartbeat integration and floating addresses.\r\n\r\nThe following network topology is recommended for the cluster. The BMC network can be on the same interface as system (eth0). The system network is used to boot and provision the cluster.\r\n\r\n    IF   Network  Address Range\r\n    bmc  bmc      10.0.0.0/16\r\n    eth0 system   10.1.0.0/16\r\n    eth1 storage  10.2.0.0/16\r\n    eth2 mpi      10.3.0.0/16\r\n    ethX external ?\r\n\r\nThe network configuration is found in `network.yml`. Each network interface can be a bond. On high-performance systems storage and mpi is InfiniBand or other high-speed network. If you have less than 4 interfaces use alias networks. Note that\r\n\r\n### Root servers in VirtualBox \r\nYou can make a virtual infrastructure in VirtualBox. Create the following virtual networks:\r\n\r\n    Network   VBox Net IPv4 Addr  Mask DHCP\r\n    system    vboxnetN 10.1.1.254 16   off\r\n    storage   vboxnetM 10.2.1.254 16   off\r\n    mpi       intnet\r\n    external  NAT/Bridged\r\n\r\nSetup the virtual server to have 2TB of disk 4 network cards and network boot enabled.\r\n\r\n## Primordial Installation\r\nSpace jockey is a very simple bootp tool. It does not compare with Cobbler or Xcat. Its main purpose is to boot and install minimal servers from your laptop, it is an entry point. Later on the root servers are used for large-scale cluster installation. You can configure root servers by ansible. In the 2nd stage Xcat or Cobbler is installed by a playbook and used to provision the compute cluster. For the primordial installation you need OS X, nginx and a dnsmasq server. To install the boot servers:\r\n\r\n    brew install dnsmasq nginx\r\n\r\nFrom now on all commands are relative to the `jockey` directory:\r\n\r\n    cd $HOME/gridhowto/space\r\n\r\nIf you don't know which machine to boot you can check bootp requests from the root servers by:\r\n\r\n    ./jockey dump IF\r\n\r\nwhere IF is the interface to listen on eg. vboxnet0.\r\n\r\nDNSmasq is an all-inclusive DNS/DHCP/BOOTP server. Its configuration is found in the `masq` file. Edit the `ROOT SERVER BOOTP` section is you want static assignment, eg:\r\n\r\n    dhcp-host=08:00:27:14:68:75,10.1.1.1,infinite\r\n\r\nThe recommended way is to put an installation DVD in each server and leave the disk in the server. You can consider it as a rescue system which is always available. All you need now is to bootstrap the installer.\r\n\r\nCreate the `boot/centos6.3` directory and put `vmlinuz` and `initrd.img` from the CentOS install media. Edit the `kickstart` file to customize the installation, especially `NETWORK` and `HOSTNAME` section. Put `pxelinux.0, chain.c32` from the syslinux 4.X package into `boot`.\r\n\r\nSet the address of the host machine (your laptop's corresponding interface), eg.:\r\n\r\n    ./jockey host 10.1.1.254\r\n\r\nKickstart a MAC address with the installation, eg.:\r\n\r\n    ./jockey kick 08:00:27:14:68:75\r\n\r\nThe `kick` command creates a kickstart file in `boot` and a pxelinux configuration in `boot/pxelinux.cfg`. It also generates a root password which you can use for the stage 2 provisioning. Edit kickstarts (`boot/*.ks` files) after kicked. Root passwords are in `*.pass` files.\r\n\r\nFinish the preparatin by starting the boot servers (http, dnsmasq) each in a separate terminal:\r\n\r\n    ./jockey http\r\n    ./jockey boot\r\n\r\nBoot servers listen on the IP you specified by the `host` command. The boot process should start now and the automatic installation continues. If finished change the boot order of the machine by:\r\n\r\n    ./jockey local 08:00:27:14:68:75\r\n\r\nThis command changes the pxelinux to local boot. Switch IPMI to local boot for real servers.\r\n\r\n### Install from URL\r\nMount install media and link to under `boot/centos6.3/repo`. Edit the kickstart file and change `cdrom` to:\r\n\r\n    url --url http://10.1.1.254:8080/centos6.3/repo\r\n\r\n### VNC-based Graphical Install\r\nFor headless installation use VNC. Edit the corresponding file in `boot/pxelinux.cfg` and set the following kernel parameters:\r\n\r\n    APPEND vnc ...\r\n\r\nVNC is started without password. Connect your VNC client to eg. `10.1.1.1:1`.\r\n\r\n### Hardware Detection\r\nFor syslinux HW detection you need `boot/hdt.c32`\r\n\r\nSwitch to detection by:\r\n\r\n    ./jockey detect 08:00:27:14:68:75 \r\n\r\n### Firmware Upgrade with FreeDOS\r\nThis section is based on http://wiki.gentoo.org/wiki/BIOS_Update . You have to use a linux host to create the bootdisk image. You have to download freedos tools from ibiblio.org:\r\n\r\n    dd if=/dev/zero of=freedos bs=1024 count=20480\r\n    mkfs.msdos freedos\r\n    unzip sys-freedos-linux.zip && ./sys-freedos.pl --disk=freedos\r\n    mkdir $PWD/mnt; mount -o loop freedos /mnt\r\n\r\nCopy the firmware upgrade files to `$PWD/mnt` and umount the disk. Put `memdisk` and `freedos` to `boot` directory and switch to firmware (and reboot the machine):\r\n\r\n    ./jockey firmware 08:00:27:14:68:75\r\n\r\n### Install ESXi 5.X\r\nYou have to use syslinux 4.X . Mount ESXi install media under `boot/esxi/repo`. Put `mboot.c32` from the install media into jockey's root directory. Kickstart the machine to boot ESXi installer:\r\n\r\n    ./jockey esxi 08:00:27:14:68:75\r\n\r\nEdit the kickstart file if you want to change the default settings.\r\n\r\n### Other Mini-Linux Variants\r\nYou can boot Cirros and Tiny Linux as well. For CirrOS put `initrd.img` and `vmlinuz` into `boot/cirros`, for Tiny Linux put `core.gz` and `vmlinuz` into `boot/tiny`, and switch eg. to Tiny:\r\n\r\n    ./jockey tiny 08:00:27:14:68:75\r\n\r\n### Kickstart from scratch\r\nA good starting point for a kickstart can be found in the EAL4 package:\r\n\r\n    cd src\r\n    wget ftp://ftp.pbone.net/mirror/ftp.redhat.com/pub/redhat/linux/eal/EAL4_RHEL5/DELL/RPMS/lspp-eal4-config-dell-1.0-1.el5.noarch.rpm\r\n    rpm2cpio lspp-eal4-config-dell-1.0-1.el5.noarch.rpm | cpio -idmv\r\n\r\n## IPMI Basics\r\nIf you happen to have real metal servers you need to deal with IPMI as well. Enterprise class machiens contain a small computer which you can use to remote control the machine. IPMI interfaces connect to the bmc network. Install ipmitools:\r\n\r\n    brew install ipmitool\r\n\r\nYou can register IPMI users with different access levels. Connect to the remote machine with the default settings:\r\n\r\n    ipmitool -I lanplus -U admin -P admin -H <BMC IP>\r\n\r\nGet a remote remote console:\r\n\r\n    xterm -e \"ipmitool -I lanplus -U admin -P admin -H <BMC IP> sol activate\"\r\n\r\nGet sensor listing:\r\n\r\n    ipmitool -I lanplus -U admin -P admin -H <BMC IP> sdr\r\n\r\n### IPMI Management with Space Jockey\r\nSetup IPMI adresses according to the network topology. Dip OS X into the IPMI LAN:\r\n\r\n    sudo ifconfig en0 alias 10.0.1.254 255.255.0.0\r\n\r\nSet the IPMI user and password:\r\n\r\n    ./jockey ipmi user admin admin\r\n\r\nGet a serial-over-lan console:\r\n\r\n    ./jockey ipmi tool 10.0.1.1 sol active\r\n\r\nGet the power status:\r\n\r\n    ./jockey ipmi tool 10.0.1.1 chassis status\r\nReboot a machine:\r\n\r\n    ./jockey ipmi tool 10.0.1.1 power reset\r\n\r\nForce PXE boot on the next boot only:\r\n\r\n    ./jockey ipmi tool 10.0.1.1 chassis bootdev pxe\r\n\r\nReboot the IPMI card:\r\n\r\n    ./jockey ipmi tool 10.0.1.1 mc reset cold\r\n\r\nGet sensor output:\r\n\r\n    ./jockey ipmi tool 10.0.1.1 sdr list\r\n\r\nGet the error log:\r\n\r\n    ./jockey ipmi tool 10.0.1.1 sel elist\r\n\r\n## InfinBand Basics\r\n\r\n## Ansible Bootstrap\r\nAnsible is used to further provision root servers on the stage 2 level. Stage 2 is responsible to reach the production ready state of the grid.\r\n\r\nFrom now on all commands are relative to `$HOME/gridhowto`:\r\n\r\n    cd $HOME/gridhowto\r\n\r\nEdit `hosts` file:\r\n\r\n    [root]\r\n    root-01 ansible_ssh_host=10.1.1.1\r\n    root-02 ansible_ssh_host=10.1.1.2\r\n\r\nCheck the connection:\r\n\r\n    ansible root-01 -i hosts -m raw -a \"hostname\" -u root -k\r\n\r\nThe bootstrap playbook creates the admin wheel user:\r\n\r\n    ssh-keygen -f keys/admin\r\n    bin/play root-01 bootstrap.yml -k -u root\r\n    bin/play root-02 bootstrap.yml -k -u root\r\n\r\nTest the bootstrap:\r\n\r\n    bin/admin root ping -k\r\n\r\nBy securing the server you lock out root. Only admin is allowed to login with keys:\r\n\r\n    bin/play root secure.yml -k --sudo\r\n\r\nReboot or shutdown the machines by:\r\n\r\n    bin/reboot root -k\r\n    bin/shutdown root -k\r\n\r\nCreate a new LVM partition:\r\n\r\n    bin/admin root run \"lvcreate -l 30%FREE -n data vg_root\" -k --sudo\r\n\r\n\r\n## Basic Services\r\nRoot servers provide NTP for the cluster. If you have a very large cluster root servers talk only to satellite servers aka rack leaders. Root servers are stratum 2 time servers. Each root server broadcasts time to the system network with crypto enabled.\r\n\r\nBasic services contain NTP, Rsyslog and DNSmasq hosts cache:\r\n\r\n    bin/play root basic.yml -k --sudo\r\n\r\nRoot server names are cached in `/etc/hosts.d/root`. Put DNS cache files (hosts) in `/etc/hosts.d` and notify dnsmasq to reload.\r\n\r\n### EPEL Repository\r\n\r\n    bin/play root repo.yml -k --sudo\r\n\r\n### Firewall\r\n\r\n    bin/play root firewall.yml -k --sudo\r\n\r\n## Ganglia\r\n\r\n## Cluster FS 1\r\n\r\n### Glusterfs\r\n\r\n### DRBD\r\n\r\n## HA Mysql\r\n\r\n## HA Slurm\r\n\r\n## HA XCat\r\n\r\n## Grid\r\n### Globus\r\n#### PKI\r\n#### GSI-SSH\r\n#### GridFTP\r\n### GateONE","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}